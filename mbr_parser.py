def byte_to_hex(byte): #return "0x{:02x}".format(ord(btte))
	'''
	enc = hex(ord(byte))
	if len(str(enc)) == 3 : enc = "0x0" + str(enc)[2:]
	return str(enc)
	'''
	enc = "0x{:02x}".format(ord(byte))
	return enc

def mbr_parser():
	try:
		with open("/dev/disk3", "rb") as f:
			mbr = f.read(512)
			mbr_list = []
			for mbr_byte in mbr:
				mbr_list.append(byte_to_hex(mbr_byte))
			print("success to read mbr")
			return mbr_list
	except:
		backup_list = [
		'0x33', '0xc0', '0x8e', '0xd0', '0xbc', '0x00', '0x7c', '0x8e',
		'0xc0', '0x8e', '0xd8', '0xbe', '0x00', '0x7c', '0xbf', '0x00',
		'0x06', '0xb9', '0x00', '0x02', '0xfc', '0xf3', '0xa4', '0x50',
		'0x68', '0x1c', '0x06', '0xcb', '0xfb', '0xb9', '0x04', '0x00',
		'0xbd', '0xbe', '0x07', '0x80', '0x7e', '0x00', '0x00', '0x7c',
		'0x0b', '0x0f', '0x85', '0x0e', '0x01', '0x83', '0xc5', '0x10',
		'0xe2', '0xf1', '0xcd', '0x18', '0x88', '0x56', '0x00', '0x55',
		'0xc6', '0x46', '0x11', '0x05', '0xc6', '0x46', '0x10', '0x00',
		'0xb4', '0x41', '0xbb', '0xaa', '0x55', '0xcd', '0x13', '0x5d',
		'0x72', '0x0f', '0x81', '0xfb', '0x55', '0xaa', '0x75', '0x09',
		'0xf7', '0xc1', '0x01', '0x00', '0x74', '0x03', '0xfe', '0x46',
		'0x10', '0x66', '0x60', '0x80', '0x7e', '0x10', '0x00', '0x74',
		'0x26', '0x66', '0x68', '0x00', '0x00', '0x00', '0x00', '0x66',
		'0xff', '0x76', '0x08', '0x68', '0x00', '0x00', '0x68', '0x00',
		'0x7c', '0x68', '0x01', '0x00', '0x68', '0x10', '0x00', '0xb4',
		'0x42', '0x8a', '0x56', '0x00', '0x8b', '0xf4', '0xcd', '0x13',
		'0x9f', '0x83', '0xc4', '0x10', '0x9e', '0xeb', '0x14', '0xb8',
		'0x01', '0x02', '0xbb', '0x00', '0x7c', '0x8a', '0x56', '0x00',
		'0x8a', '0x76', '0x01', '0x8a', '0x4e', '0x02', '0x8a', '0x6e',
		'0x03', '0xcd', '0x13', '0x66', '0x61', '0x73', '0x1c', '0xfe',
		'0x4e', '0x11', '0x75', '0x0c', '0x80', '0x7e', '0x00', '0x80',
		'0x0f', '0x84', '0x8a', '0x00', '0xb2', '0x80', '0xeb', '0x84',
		'0x55', '0x32', '0xe4', '0x8a', '0x56', '0x00', '0xcd', '0x13',
		'0x5d', '0xeb', '0x9e', '0x81', '0x3e', '0xfe', '0x7d', '0x55',
		'0xaa', '0x75', '0x6e', '0xff', '0x76', '0x00', '0xe8', '0x8d',
		'0x00', '0x75', '0x17', '0xfa', '0xb0', '0xd1', '0xe6', '0x64',
		'0xe8', '0x83', '0x00', '0xb0', '0xdf', '0xe6', '0x60', '0xe8',
		'0x7c', '0x00', '0xb0', '0xff', '0xe6', '0x64', '0xe8', '0x75',
		'0x00', '0xfb', '0xb8', '0x00', '0xbb', '0xcd', '0x1a', '0x66',
		'0x23', '0xc0', '0x75', '0x3b', '0x66', '0x81', '0xfb', '0x54',
		'0x43', '0x50', '0x41', '0x75', '0x32', '0x81', '0xf9', '0x02',
		'0x01', '0x72', '0x2c', '0x66', '0x68', '0x07', '0xbb', '0x00',
		'0x00', '0x66', '0x68', '0x00', '0x02', '0x00', '0x00', '0x66',
		'0x68', '0x08', '0x00', '0x00', '0x00', '0x66', '0x53', '0x66',
		'0x53', '0x66', '0x55', '0x66', '0x68', '0x00', '0x00', '0x00',
		'0x00', '0x66', '0x68', '0x00', '0x7c', '0x00', '0x00', '0x66',
		'0x61', '0x68', '0x00', '0x00', '0x07', '0xcd', '0x1a', '0x5a',
		'0x32', '0xf6', '0xea', '0x00', '0x7c', '0x00', '0x00', '0xcd',
		'0x18', '0xa0', '0xb7', '0x07', '0xeb', '0x08', '0xa0', '0xb6',
		'0x07', '0xeb', '0x03', '0xa0', '0xb5', '0x07', '0x32', '0xe4',
		'0x05', '0x00', '0x07', '0x8b', '0xf0', '0xac', '0x3c', '0x00',
		'0x74', '0x09', '0xbb', '0x07', '0x00', '0xb4', '0x0e', '0xcd',
		'0x10', '0xeb', '0xf2', '0xf4', '0xeb', '0xfd', '0x2b', '0xc9',
		'0xe4', '0x64', '0xeb', '0x00', '0x24', '0x02', '0xe0', '0xf8', 
		'0x24', '0x02', '0xc3', '0x49', '0x6e', '0x76', '0x61', '0x6c',
		'0x69', '0x64', '0x20', '0x70', '0x61', '0x72', '0x74', '0x69',
		'0x74', '0x69', '0x6f', '0x6e', '0x20', '0x74', '0x61', '0x62',
		'0x6c', '0x65', '0x00', '0x45', '0x72', '0x72', '0x6f', '0x72',
		'0x20', '0x6c', '0x6f', '0x61', '0x64', '0x69', '0x6e', '0x67',
		'0x20', '0x6f', '0x70', '0x65', '0x72', '0x61', '0x74', '0x69',
		'0x6e', '0x67', '0x20', '0x73', '0x79', '0x73', '0x74', '0x65',
		'0x6d', '0x00', '0x4d', '0x69', '0x73', '0x73', '0x69', '0x6e',
		'0x67', '0x20', '0x6f', '0x70', '0x65', '0x72', '0x61', '0x74',
		'0x69', '0x6e', '0x67', '0x20', '0x73', '0x79', '0x73', '0x74',
		'0x65', '0x6d', '0x00', '0x00', '0x00', '0x63', '0x7b', '0x9a',
		'0x76', '0x8e', '0xa3', '0x8e', '0x00', '0x00', '0x80', '0x20',
		'0x21', '0x00', '0x07', '0xfe', '0xff', '0xff', '0x00', '0x08',
		'0x00', '0x00', '0x00', '0x30', '0x89', '0x03', '0x00', '0xfe',
		'0xff', '0xff', '0x07', '0xfe', '0xff', '0xff', '0x00', '0x38',
		'0x89', '0x03', '0x00', '0x38', '0x0b', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x55', '0xaa']
		print("Success to open backup")
		return backup_list

def check_signature(signature):
	signature = int(signature[1],16)*0x100 + int(signature[0], 16)
	if signature == 0xaa55: return 1
	return 0

class partition:
	def __init__(self, partition_data):
		self.flag		= partition_data[0]
		self.start_CHS	= partition_data[1:3]
		self.type		= partition_data[4]
		self.end_CHS	= partition_data[5:7]
		self.start_LBA	= partition_data[8:11]
		self.size		= partition_data[12:15]

	def check_boot_flag(self):
		if self.flag == "0x80": return "bootable"
		return "unbootable"

	def check_CHS_address(address):
		address.reverse()
		CHS_address = int(address[0],16)*0x10000 + int(address[1],16)*0x100 + int(address[2],16)
	pass

def check_partition(partition_data):
	print("partition1")
	partition1 = partition(partition_data[:16])
	print(partition1.check_boot_flag())

	partition1_ = partition_data[:16]
	print_list(partition1_)

	print("partition2")
	partition2 = partition_data[16:32]
	print_list(partition2)
	
	print("partition3")
	print_list(partition_data[32:48])
	
	print("partition4")
	print_list(partition_data[48:])

def print_list(data_list):
	counter = 0
	for each_data_list in data_list:
		counter += 1
		print each_data_list,
		if counter % 0x10 == 0: print
	print

def main():
	mbr_data = mbr_parser()
	if check_signature(mbr_data[-2:]):
		print(mbr_data)
	else: print("fail to read mbr")

def main_back():
	if check_signature(backup_list[-2:]):
		print_list(backup_list[:446])
		check_partition(backup_list[446:446+0x40])

if __name__ == "__main__":
	#main()
	main()