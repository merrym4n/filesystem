def byte_to_hex(byte): 
	#return "0x{:02x}".format(ord(byte))
	return hex(ord(byte))

def little_big(little_address):
	little_address.reverse()
	big_address = int(little_address[0],16)
	for byte in little_address[1:]:
		big_address *= 0x100
		big_address += int(byte,16)
	if len(little_address) == 2: return "0x{:04x}".format(big_address,16)
	if len(little_address) == 3: return "0x{:06x}".format(big_address,16)
	if len(little_address) == 4: return "0x{:08x}".format(big_address,16)
	return "except"

def print_list(data_list):
	counter = 0
	for each_data_list in data_list:
		counter += 1
		print each_data_list,
		if counter % 0x10 == 0: print
	if counter % 0x10 != 0: print

class mbr:
	def __init__(self, mbr_data):
		self.boot_code	= mbr_data[:446]
		self.partition1	= mbr_data[446:462]
		self.partition2	= mbr_data[462:478]
		self.partition3	= mbr_data[478:494]
		self.partition4	= mbr_data[494:510]
		self.signature	= mbr_data[510:512]

	def check_signature(self):
		signature = little_big(self.signature)
		print("Disk_signature\t: " + signature)
		if signature == "0xaa55": return 1
		return 0


def mbr_parser():
	try:	# mac
		with open("/dev/disk3", "rb") as f:
			mbr = f.read(512)
			mbr_list = []
			for mbr_byte in mbr:
				mbr_list.append(byte_to_hex(mbr_byte))
			print("Success to read mbr")
			return mbr_list

	except:	# etc
		backup_list = [
		'0x33', '0xc0', '0x8e', '0xd0', '0xbc', '0x00', '0x7c', '0x8e',
		'0xc0', '0x8e', '0xd8', '0xbe', '0x00', '0x7c', '0xbf', '0x00',
		'0x06', '0xb9', '0x00', '0x02', '0xfc', '0xf3', '0xa4', '0x50',
		'0x68', '0x1c', '0x06', '0xcb', '0xfb', '0xb9', '0x04', '0x00',
		'0xbd', '0xbe', '0x07', '0x80', '0x7e', '0x00', '0x00', '0x7c',
		'0x0b', '0x0f', '0x85', '0x0e', '0x01', '0x83', '0xc5', '0x10',
		'0xe2', '0xf1', '0xcd', '0x18', '0x88', '0x56', '0x00', '0x55',
		'0xc6', '0x46', '0x11', '0x05', '0xc6', '0x46', '0x10', '0x00',
		'0xb4', '0x41', '0xbb', '0xaa', '0x55', '0xcd', '0x13', '0x5d',
		'0x72', '0x0f', '0x81', '0xfb', '0x55', '0xaa', '0x75', '0x09',
		'0xf7', '0xc1', '0x01', '0x00', '0x74', '0x03', '0xfe', '0x46',
		'0x10', '0x66', '0x60', '0x80', '0x7e', '0x10', '0x00', '0x74',
		'0x26', '0x66', '0x68', '0x00', '0x00', '0x00', '0x00', '0x66',
		'0xff', '0x76', '0x08', '0x68', '0x00', '0x00', '0x68', '0x00',
		'0x7c', '0x68', '0x01', '0x00', '0x68', '0x10', '0x00', '0xb4',
		'0x42', '0x8a', '0x56', '0x00', '0x8b', '0xf4', '0xcd', '0x13',
		'0x9f', '0x83', '0xc4', '0x10', '0x9e', '0xeb', '0x14', '0xb8',
		'0x01', '0x02', '0xbb', '0x00', '0x7c', '0x8a', '0x56', '0x00',
		'0x8a', '0x76', '0x01', '0x8a', '0x4e', '0x02', '0x8a', '0x6e',
		'0x03', '0xcd', '0x13', '0x66', '0x61', '0x73', '0x1c', '0xfe',
		'0x4e', '0x11', '0x75', '0x0c', '0x80', '0x7e', '0x00', '0x80',
		'0x0f', '0x84', '0x8a', '0x00', '0xb2', '0x80', '0xeb', '0x84',
		'0x55', '0x32', '0xe4', '0x8a', '0x56', '0x00', '0xcd', '0x13',
		'0x5d', '0xeb', '0x9e', '0x81', '0x3e', '0xfe', '0x7d', '0x55',
		'0xaa', '0x75', '0x6e', '0xff', '0x76', '0x00', '0xe8', '0x8d',
		'0x00', '0x75', '0x17', '0xfa', '0xb0', '0xd1', '0xe6', '0x64',
		'0xe8', '0x83', '0x00', '0xb0', '0xdf', '0xe6', '0x60', '0xe8',
		'0x7c', '0x00', '0xb0', '0xff', '0xe6', '0x64', '0xe8', '0x75',
		'0x00', '0xfb', '0xb8', '0x00', '0xbb', '0xcd', '0x1a', '0x66',
		'0x23', '0xc0', '0x75', '0x3b', '0x66', '0x81', '0xfb', '0x54',
		'0x43', '0x50', '0x41', '0x75', '0x32', '0x81', '0xf9', '0x02',
		'0x01', '0x72', '0x2c', '0x66', '0x68', '0x07', '0xbb', '0x00',
		'0x00', '0x66', '0x68', '0x00', '0x02', '0x00', '0x00', '0x66',
		'0x68', '0x08', '0x00', '0x00', '0x00', '0x66', '0x53', '0x66',
		'0x53', '0x66', '0x55', '0x66', '0x68', '0x00', '0x00', '0x00',
		'0x00', '0x66', '0x68', '0x00', '0x7c', '0x00', '0x00', '0x66',
		'0x61', '0x68', '0x00', '0x00', '0x07', '0xcd', '0x1a', '0x5a',
		'0x32', '0xf6', '0xea', '0x00', '0x7c', '0x00', '0x00', '0xcd',
		'0x18', '0xa0', '0xb7', '0x07', '0xeb', '0x08', '0xa0', '0xb6',
		'0x07', '0xeb', '0x03', '0xa0', '0xb5', '0x07', '0x32', '0xe4',
		'0x05', '0x00', '0x07', '0x8b', '0xf0', '0xac', '0x3c', '0x00',
		'0x74', '0x09', '0xbb', '0x07', '0x00', '0xb4', '0x0e', '0xcd',
		'0x10', '0xeb', '0xf2', '0xf4', '0xeb', '0xfd', '0x2b', '0xc9',
		'0xe4', '0x64', '0xeb', '0x00', '0x24', '0x02', '0xe0', '0xf8', 
		'0x24', '0x02', '0xc3', '0x49', '0x6e', '0x76', '0x61', '0x6c',
		'0x69', '0x64', '0x20', '0x70', '0x61', '0x72', '0x74', '0x69',
		'0x74', '0x69', '0x6f', '0x6e', '0x20', '0x74', '0x61', '0x62',
		'0x6c', '0x65', '0x00', '0x45', '0x72', '0x72', '0x6f', '0x72',
		'0x20', '0x6c', '0x6f', '0x61', '0x64', '0x69', '0x6e', '0x67',
		'0x20', '0x6f', '0x70', '0x65', '0x72', '0x61', '0x74', '0x69',
		'0x6e', '0x67', '0x20', '0x73', '0x79', '0x73', '0x74', '0x65',
		'0x6d', '0x00', '0x4d', '0x69', '0x73', '0x73', '0x69', '0x6e',
		'0x67', '0x20', '0x6f', '0x70', '0x65', '0x72', '0x61', '0x74',
		'0x69', '0x6e', '0x67', '0x20', '0x73', '0x79', '0x73', '0x74',
		'0x65', '0x6d', '0x00', '0x00', '0x00', '0x63', '0x7b', '0x9a',
		'0x76', '0x8e', '0xa3', '0x8e', '0x00', '0x00', '0x80', '0x20',
		'0x21', '0x00', '0x07', '0xfe', '0xff', '0xff', '0x00', '0x08',
		'0x00', '0x00', '0x00', '0x30', '0x89', '0x03', '0x00', '0xfe',
		'0xff', '0xff', '0x07', '0xfe', '0xff', '0xff', '0x00', '0x38',
		'0x89', '0x03', '0x00', '0x38', '0x0b', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x00',
		'0x00', '0x00', '0x00', '0x00', '0x00', '0x00', '0x55', '0xaa']
		print("Success to open backup")
		return backup_list

partition_types = {
	0x00:"Empty",
	0x01:"DOS 12-bit FAT, CHS",
	0x02:"XENUX root file system, CHS",
	0x03:"XENIX / usr file system (obsolete)",
	0x04:"DOS 16-bit FAT (up to 32M), CHS",
	0x05:"DOS 3.3+extended partitino, CHS",
	0x06:"DOS 3.3.1+Large File System (16-bit FAT, over 32M), CHS",
	0x07:"Advanced Unix, exFAT, NTFS",
	0x08:"OS/2(V1.0-1.3 only, AIX bootable partion, \
	Commodore DOS, DELL partition spanning multiple drives",
	0x09:"AIX data partion",
	0x0A:"OPUS, Coherent swap partion, OS/2 Boot Manager",
	0x0B:"Windows 95 with 32-bit FAT, CHS",
	0x0C:"WIndows 95 with 32-bit FAT (using LBA-mode INT 13 extensions), LBA",
	0xFE:"LANstep, IBM PS/2 IML",
	0xFF:"XENIX bad block table",
}

class partition:
	def __init__(self, partition_data):
		self.flag		= partition_data[0]
		self.start_CHS	= partition_data[1:4]
		self.type		= partition_data[4]
		self.end_CHS	= partition_data[5:8]
		self.start_LBA	= partition_data[8:12]
		self.size		= partition_data[12:16]

	def check_boot_flag(self):
		print("Boot flag\t:"),
		if self.flag == "0x80":
			print("Bootable")
			return 1
		print("Unbootable")
		return 0

	def check_start_CHS(self):
		address = little_big(self.start_CHS)
		print("start_CHS\t: " + address)
		return address

	def check_type(self):
		print("type\t\t: %s\t\t(%s)" % \
			(self.type, partition_types.get(int(self.type,16), "Invalid")))
		return self.type

	def check_end_CHS(self):
		address = little_big(self.end_CHS)
		print("end_CHS\t\t: " + address)
		return address

	def check_start_LBA(self):
		address = little_big(self.start_LBA)
		print("start_LBA\t: " + address)
		return address

	def check_size(self):
		size= little_big(self.size)
		#print("l_b(self.size)" + size)
		mb	= (size, int(size,16)/(2**11))
		print(mb[1])
		#gb	= int(mb)/(2**4)
		print("size\t\t: %s\t(%sMB)" % mb)
		return size


def check_partition(partition_data):
	print("==========================")
	print("partition")
	print_list(partition_data)
	partition1 = partition(partition_data)

	partition1.check_boot_flag()
	partition1.check_start_CHS()
	partition1.check_type()
	partition1.check_end_CHS()
	partition1.check_start_LBA()
	partition1.check_size()

def main():
	mbr_data= mbr_parser()
	print_list(mbr_data)
	myMBR	= mbr(mbr_data)
	if myMBR.check_signature():
		check_partition(mbr_data[446:462])
		check_partition(mbr_data[462:478])
		check_partition(mbr_data[478:494])
		check_partition(mbr_data[494:510])
	else: print("fail to read mbr")

if __name__ == "__main__":
	main()